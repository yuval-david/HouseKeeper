import Head from 'next/head';
import Image from 'next/image'
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react'
import style from "../styles/Login.module.css"
import { CustomInput } from '@/components/UI/FormFields/CustomInput';
import { ModalMessage } from '@/components/UI/Modals/ModalMessage';
import { Loader } from '@/components/UI/Loader';
import { Building } from '@/Types/objects_types';

export default function RegisterPage() {
    const router = useRouter();

    const [buildings, setBuildings] = useState<Building[]>([]);
    const [buildingsOptions, setBuildingOptions] = useState<string[]>(['1', '2']);

    // Form Fields
    const [fullName, setFullName] = useState("");
    const [email, setEmail] = useState("");
    const [phone, setPhone] = useState();
    const [password, setPassword] = useState("");
    const [passwordConfirm, setPasswordConfirm] = useState("");
    const [buildingId, setBuildingId] = useState();
    const [id_number, setIdNumber] = useState();
    const [apartment_floor, setApFlooer] = useState();
    const [apartment_number, setApNumber] = useState();
    const [apartment_spm, setApSpm] = useState();
    // Form loading
    const [isLoadingAdd, setIsLoadingAdd] = useState<boolean>(false);
    const [successModal, setSuccessModal] = useState(false);
    const [errorModal, setErrorModal] = useState(false);
    const [passwordsModal, setPasswordsModal] = useState(false);

    const handleCloseSuccessModal = () => {
        setSuccessModal(false);
        router.push("/login");
    }
    const handleCloseErrorModal = () => {
        setErrorModal(false);
    }
    const handleClosePasswordsModal = () => {
        setPasswordsModal(false);
    }

    const apiEndpoint = process.env.NEXT_PUBLIC_API_ENDPOINT;
    const addUserEndpoint = apiEndpoint + `/v2/buildings/${buildingId}/users`;
    const buildingsEndpoint = apiEndpoint + `/v2/buildings`;

    // Fetch buildings list
    useEffect(() => {
        fetch(buildingsEndpoint)
            .then((res) => res.json())
            .then((data) => {
                setBuildings(data.buildings);
                const buildingsIds = data.buildings.map((building: Building) => building.id.toString());
                setBuildingOptions(buildingsIds)
            })
            .catch(error => console.log(error));
    }, []);

    // Handle submit register function
    const handleRegisterSubmit = async (event: any) => {
        event.preventDefault();

        if (!buildingId) {
            alert("בחרו קוד בניין.");
            return;
        };

        setIsLoadingAdd(true);
        const data = {
            id_number: id_number ? parseInt(id_number) : null,
            name: fullName,
            phone: phone ? parseInt(phone) : null,
            isvahadbait: false,
            ismanagementcompany: false,
            email,
            apartment_floor: apartment_floor ? parseInt(apartment_floor) : null,
            apartment_number: apartment_number ? parseInt(apartment_number) : null,
            apartment_spm: apartment_spm ? parseInt(apartment_spm) : null,
            selected_building_id: buildingId ? parseInt(buildingId) : null,
            password
        }

        try {

            if (password !== passwordConfirm) {
                setIsLoadingAdd(false);
                setPasswordsModal(true);
                return;
            };

            const response: any = await fetch(addUserEndpoint, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data)
            });
            const resJson = await response.json();

            setIsLoadingAdd(false);
            if (response.ok) {
                setSuccessModal(true);
            } else {
                setErrorModal(true);
            }
        } catch (error) {
            setIsLoadingAdd(false);
            setErrorModal(true);
            console.log(error);
        }
    }


    return (
        <>
            <Head>
                <title>HouseKeeper | הרשמה</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={`${style.login_main} ${style.register}`} dir='rtl'>
                <div className={style.login_logo}>
                    <Image src="/housekeeper.jpg" fill alt="House Keeper" />
                </div>
                <div className={style.login_form}>
                    <h1 className={`blue_title ${style.form_title}`}>הרשמה</h1>
                    <form dir='rtl' onSubmit={handleRegisterSubmit}>
                        <div className={style.fields_cols}>
                            <div className={style.field_container}>
                                <CustomInput value={buildingId} onChange={(e) => setBuildingId(e.target.value)} required label="קוד בניין" dir='rtl' type='select' options={buildingsOptions} />
                                <CustomInput value={fullName} onChange={(e) => setFullName(e.target.value)} required label="שם מלא" dir='rtl' type='text' />
                                <CustomInput value={email} onChange={(e) => setEmail(e.target.value)} required label="כתובת אימייל" dir='ltr' type='email' />
                                <CustomInput value={password} onChange={(e) => setPassword(e.target.value)} required label="סיסמה" dir='ltr' type='password' />
                                <CustomInput value={passwordConfirm} onChange={(e) => setPasswordConfirm(e.target.value)} required label="אישור סיסמה" dir='ltr' type='password' />
                            </div>
                            <div className={style.field_container}>
                                <CustomInput value={id_number} onChange={(e) => setIdNumber(e.target.value)} required label="תעודת זהות" dir='ltr' type='number' maxLength={9} />
                                <CustomInput value={phone} onChange={(e) => setPhone(e.target.value)} required label="טלפון" dir='ltr' type='tel' maxLength={12} />
                                <CustomInput value={apartment_number} onChange={(e) => setApNumber(e.target.value)} required label="מספר דירה" dir='rtl' type='number' maxLength={3} />
                                <CustomInput value={apartment_floor} onChange={(e) => setApFlooer(e.target.value)} required label="מספר קומה" dir='ltr' type='number' />
                                <CustomInput value={apartment_spm} onChange={(e) => setApSpm(e.target.value)} required label='גודל הדירה (מ"ר)' dir='ltr' type='number' />
                            </div>
                        </div>

                        <button className={style.submit_btn} type='submit'>להרשמה</button>
                    </form>
                </div>
                {isLoadingAdd && <Loader />}
                <ModalMessage isOpen={successModal} buttonText='לעמוד התחברות' handleClose={handleCloseSuccessModal} type='success' message="המשתמש נוצר בהצלחה" />
                <ModalMessage isOpen={errorModal} buttonText='אישור' handleClose={handleCloseErrorModal} type='error' message="ישנה שגיאה ביצירת היוזר." />
                <ModalMessage isOpen={passwordsModal} buttonText='אישור' handleClose={handleClosePasswordsModal} type='warning' message="הסיסמאות אינן זהות. אנא הקלידו שוב את הסיסמה." />
            </main>
        </>
    )
}
